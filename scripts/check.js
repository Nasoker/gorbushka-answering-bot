#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */

import { config } from '../src/config/config.js';
import fs from 'fs';

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n');

const checks = {
  '‚úÖ API_ID': config.telegram.apiId && !isNaN(config.telegram.apiId),
  '‚úÖ API_HASH': config.telegram.apiHash && config.telegram.apiHash !== 'your_api_hash',
  '‚úÖ PHONE_NUMBER': config.telegram.phoneNumber && config.telegram.phoneNumber !== '+your_phone_number',
  '‚úÖ GROUP_CHAT_ID': config.group.chatId && config.group.chatId !== 'your_group_id',
  '‚úÖ SESSION_STRING (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)': config.telegram.sessionString && config.telegram.sessionString.length > 0,
};

let allGood = true;

Object.entries(checks).forEach(([key, value]) => {
  if (value) {
    console.log(`${key}`);
  } else {
    const icon = key.includes('–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ') ? '‚ö†Ô∏è' : '‚ùå';
    console.log(`${icon} ${key.replace('‚úÖ ', '')}`);
    if (!key.includes('–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ')) {
      allGood = false;
    }
  }
});

console.log('\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n');

if (config.telegram.apiId) {
  console.log(`API_ID: ${config.telegram.apiId}`);
}

if (config.telegram.phoneNumber) {
  const phone = config.telegram.phoneNumber;
  if (!phone.startsWith('+')) {
    console.log('‚ö†Ô∏è  PHONE_NUMBER –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å + (–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)');
    allGood = false;
  } else {
    console.log(`–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone}`);
  }
}

if (config.group.chatId) {
  console.log(`ID –≥—Ä—É–ø–ø—ã: ${config.group.chatId}`);
}

if (config.telegram.sessionString) {
  console.log(`–°–µ—Å—Å–∏—è: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (${config.telegram.sessionString.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
} else {
  console.log('–°–µ—Å—Å–∏—è: –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –∫–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
if (!fs.existsSync('.env')) {
  console.log('\n‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.log('–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: cp .env.example .env');
  allGood = false;
}

console.log('\n' + '='.repeat(50));

if (allGood) {
  console.log('\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞.\n');
  console.log('–ó–∞–ø—É—Å–∫: npm start\n');
} else {
  console.log('\n‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.\n');
  console.log('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: —Å–º–æ—Ç—Ä–∏—Ç–µ README.md\n');
  process.exit(1);
}

