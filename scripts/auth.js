#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ Telegram
 */

import { TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions/index.js';
import { config } from '../src/config/config.js';
import input from 'input';

async function saveSession() {
    try {
        console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram...\n');

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config.validate();

        const { apiId, apiHash, phoneNumber, sessionString } = config.telegram;
        const session = new StringSession(sessionString);

        const client = new TelegramClient(session, apiId, apiHash, {
            connectionRetries: 5,
        });

        await client.start({
            phoneNumber: async () => phoneNumber,
            password: async () => {
                const password = await input.text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω, –∏–Ω–∞—á–µ –Ω–∞–∂–º–∏—Ç–µ ENTER): ');
                if (password.trim() === '') {
                    throw new Error('NO_PASSWORD'); // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∞—Ä–æ–ª—è
                }
                return password;
            },
            phoneCode: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: '),
            onError: (err) => {
                if (err.message === 'NO_PASSWORD') {
                    console.log('‚ÑπÔ∏è 2FA –Ω–µ –≤–∫–ª—é—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–∞—Ä–æ–ª—è...');
                    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∞—Ä–æ–ª—è
                }
                console.error('‚ùå –û—à–∏–±–∫–∞:', err);
            },
        });

        console.log('\n‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!');
        console.log('\nüìù –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª .env:');
        console.log(`SESSION_STRING=${client.session.save()}`);
        console.log('\n–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏, –±–æ—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –±–µ–∑ –≤–≤–æ–¥–∞ –∫–æ–¥–∞.\n');

        await client.disconnect();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

saveSession();

