import sqlite3 from 'sqlite3';
import { promisify } from 'util';
import path from 'path';
import fs from 'fs';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export class UserDatabaseService {
    constructor(dbPath = './data/users.db') {
        this.dbPath = dbPath;
        this.db = null;
        this.isInitialized = false;
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ë–î –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        const dbDir = path.dirname(dbPath);
        if (!fs.existsSync(dbDir)) {
            fs.mkdirSync(dbDir, { recursive: true });
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async initialize() {
        if (this.isInitialized) {
            return;
        }

        try {
            // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            this.db = new sqlite3.Database(this.dbPath);
            
            // –ü—Ä–æ–º–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
            this.dbRun = promisify(this.db.run.bind(this.db));
            this.dbGet = promisify(this.db.get.bind(this.db));
            this.dbAll = promisify(this.db.all.bind(this.db));

            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await this.createTables();
            
            this.isInitialized = true;
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
     */
    async createTables() {
        const createUsersTable = `
            CREATE TABLE IF NOT EXISTS users (
                id TEXT PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                phone TEXT,
                is_bot BOOLEAN DEFAULT 0,
                chat_id TEXT,
                chat_title TEXT,
                chat_type TEXT,
                last_seen DATETIME DEFAULT CURRENT_TIMESTAMP,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `;

        const createChatsTable = `
            CREATE TABLE IF NOT EXISTS chats (
                chat_id TEXT PRIMARY KEY,
                chat_title TEXT,
                chat_type TEXT,
                username TEXT,
                last_activity DATETIME DEFAULT CURRENT_TIMESTAMP,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `;

        await this.dbRun(createUsersTable);
        await this.dbRun(createChatsTable);
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        await this.dbRun('CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)');
        await this.dbRun('CREATE INDEX IF NOT EXISTS idx_users_chat_id ON users(chat_id)');
        await this.dbRun('CREATE INDEX IF NOT EXISTS idx_chats_username ON chats(username)');
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async upsertUser(userData) {
        try {
            const {
                id,
                username,
                firstName,
                lastName,
                phone,
                bot,
                chatId,
                chatTitle,
                chatType
            } = userData;

            const query = `
                INSERT OR REPLACE INTO users 
                (id, username, first_name, last_name, phone, is_bot, chat_id, chat_title, chat_type, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
            `;

            await this.dbRun(query, [
                id.toString(), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ BigInt
                username || null,
                firstName || null,
                lastName || null,
                phone || null,
                bot ? 1 : 0,
                chatId.toString(), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chatId –≤ —Å—Ç—Ä–æ–∫—É
                chatTitle || null,
                chatType || null
            ]);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:', error.message);
            return false;
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞
     * @param {Object} chatData - –î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
     */
    async upsertChat(chatData) {
        try {
            const {
                id,
                title,
                type,
                username
            } = chatData;

            const query = `
                INSERT OR REPLACE INTO chats 
                (chat_id, chat_title, chat_type, username, updated_at)
                VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
            `;

            await this.dbRun(query, [
                id.toString(), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ BigInt
                title || null,
                type || null,
                username || null
            ]);

            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –≤ –ë–î:', error.message);
            return false;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
     * @param {number|string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object|null} - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async findUserById(userId) {
        try {
            const query = 'SELECT * FROM users WHERE id = ?';
            const user = await this.dbGet(query, [userId.toString()]); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
            return user;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID:', error.message);
            return null;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
     * @param {string} username - Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object|null} - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async findUserByUsername(username) {
        try {
            const query = 'SELECT * FROM users WHERE username = ?';
            const user = await this.dbGet(query, [username.toLowerCase()]);
            return user;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username:', error.message);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    async getAllUsers() {
        try {
            const query = 'SELECT * FROM users ORDER BY updated_at DESC';
            const users = await this.dbAll(query);
            return users;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ —á–∞—Ç–æ–≤
     */
    async getAllChats() {
        try {
            const query = 'SELECT * FROM chats ORDER BY updated_at DESC';
            const chats = await this.dbAll(query);
            return chats;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤:', error.message);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
     */
    async getStats() {
        try {
            const userCount = await this.dbGet('SELECT COUNT(*) as count FROM users');
            const chatCount = await this.dbGet('SELECT COUNT(*) as count FROM chats');
            
            return {
                users: userCount.count,
                chats: chatCount.count
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
            return { users: 0, chats: 0 };
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
     */
    async cleanupOldRecords() {
        try {
            const query = `
                DELETE FROM users 
                WHERE updated_at < datetime('now', '-30 days')
            `;
            
            const result = await this.dbRun(query);
            console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω–æ ${result.changes} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            return result.changes;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π:', error.message);
            return 0;
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
     */
    async close() {
        if (this.db) {
            await new Promise((resolve, reject) => {
                this.db.close((err) => {
                    if (err) reject(err);
                    else resolve();
                });
            });
            this.db = null;
            this.isInitialized = false;
            console.log('üìã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
let userDbService = null;

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –ë–î
 * @param {string} dbPath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î
 * @returns {UserDatabaseService} - –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
 */
export function getUserDatabaseService(dbPath = './data/users.db') {
    if (!userDbService) {
        userDbService = new UserDatabaseService(dbPath);
    }
    return userDbService;
}
