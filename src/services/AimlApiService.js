/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AIML API
 */
export class AimlApiService {
    constructor(config) {
        this.apiKey = config.apiKey;
        this.baseUrl = config.baseUrl;
        
        if (!this.apiKey) {
            throw new Error('AIMLAPI_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ AIML API
     * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç –æ—Ç API
     */
    async sendMessage(message) {
        try {
            const endpoint = `${this.baseUrl}/chat/completions`;
            
            const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Apple iPhone. –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –Ω–∞–π—Ç–∏ iPhone 17 –∏–ª–∏ iPhone Air –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è.

–†–ê–ë–û–¢–ê–ï–ú –¢–û–õ–¨–ö–û –°: iPhone 17, iPhone 17 Pro, iPhone 17 Pro Max, iPhone Air

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤! –ë–ï–ó markdown, –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤!

–î–ª—è –ö–ê–ñ–î–û–ì–û —Ç–æ–≤–∞—Ä–∞ –≤–µ—Ä–Ω–∏ –æ–±—ä–µ–∫—Ç:
- "original": –ü–û–õ–ù–ê–Ø —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–í–°–ï –∫–∞–∫ –µ—Å—Ç—å, –ù–ï –£–ë–ò–†–ê–ô –ù–ò–ß–ï–ì–û!)
- "normalized": –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "iPhone [–ú–æ–¥–µ–ª—å] [–ü–∞–º—è—Ç—å] [–¶–≤–µ—Ç] [SIM]"

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: 
- –í –ø–æ–ª–µ "original" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¢–û–ß–ù–û —Ç–∞ –∂–µ —Å—Ç—Ä–æ–∫–∞, —á—Ç–æ –∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –ö–ê–ñ–î–£–Æ —Å—Ç—Ä–æ–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
- –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç iPhone 17 –∏–ª–∏ Air, —Ç–æ "normalized" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π ""

–î–û–°–¢–£–ü–ù–´–ï –ú–û–î–ï–õ–ò (–¢–û–õ–¨–ö–û –≠–¢–ò!):

üì± iPhone 17:
   –¶–≤–µ—Ç–∞: Mist Blue, Sage, White, Black, Lavender
   –ü–∞–º—è—Ç—å: 256GB, 512GB
   SIM: 1Sim, 2Sim, eSim
   
üì± iPhone 17 Pro:
   –¶–≤–µ—Ç–∞: Cosmic Orange, Deep Blue, Silver
   –ü–∞–º—è—Ç—å: 256GB, 512GB, 1TB
   SIM: 1Sim, eSim
   
üì± iPhone 17 Pro Max:
   –¶–≤–µ—Ç–∞: Cosmic Orange, Deep Blue, Silver
   –ü–∞–º—è—Ç—å: 256GB, 512GB, 1TB, 2TB
   SIM: 1Sim, eSim
   
üì± iPhone Air:
   –¶–≤–µ—Ç–∞: Cloud White, Light Gold, Sky Blue, Space Black
   –ü–∞–º—è—Ç—å: 256GB, 512GB, 1TB
   SIM: eSim —Ç–æ–ª—å–∫–æ

–ü–†–ê–í–ò–õ–ê:

1. –ú–û–î–ï–õ–¨:
   - "17" ‚Üí "iPhone 17"
   - "17 –ø—Ä–æ/pro" ‚Üí "iPhone 17 Pro" 
   - "17 –ø—Ä–æ –º–∞–∫—Å/pro max" ‚Üí "iPhone 17 Pro Max"
   - "17 air/air" ‚Üí "iPhone Air"

2. –ü–ê–ú–Ø–¢–¨: 256GB, 512GB, 1TB, 2TB (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ ‚Üí 256GB)

3. –¶–í–ï–¢:
   iPhone 17: Mist Blue, Sage, White, Black, Lavender
   iPhone 17 Pro/Pro Max: Cosmic Orange, Deep Blue, Silver
   iPhone Air: Cloud White, Light Gold, Sky Blue, Space Black
   
   –ï—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ—Ö–æ–∂–∏–π (orange ‚Üí Cosmic Orange)

4. SIM: 1Sim, 2Sim, eSim (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Üí 1Sim, –¥–ª—è Air ‚Üí eSim)

–ü–†–ò–ú–ï–†–´:

"–ö—É–ø–ª—é 17 256 —Å–∏–Ω–∏–π" ‚Üí [{"original": "–ö—É–ø–ª—é 17 256 —Å–∏–Ω–∏–π", "normalized": "iPhone 17 256 Mist Blue 1Sim"}]
"17 –ø—Ä–æ 512 orange" ‚Üí [{"original": "17 –ø—Ä–æ 512 orange", "normalized": "iPhone 17 Pro 512 Cosmic Orange 1Sim"}]
"13) –ö—É–ø–ª—é 17 pro 512gb Orange 1 sim –ï–≤—Ä–æ–ø–∞ ? –æ—Ç–≤–µ—Ç–∏–ª –±–µ–∑ —Ü–µ–Ω—ã" ‚Üí [{"original": "13) –ö—É–ø–ª—é 17 pro 512gb Orange 1 sim –ï–≤—Ä–æ–ø–∞ ? –æ—Ç–≤–µ—Ç–∏–ª –±–µ–∑ —Ü–µ–Ω—ã", "normalized": "iPhone 17 Pro 512 Cosmic Orange 1Sim"}]

–ú–ù–û–ì–û–°–¢–†–û–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø:
"–ö–£–ü–õ–Æ\n\n17 Pro 256 silver sim - 1—à—Ç" ‚Üí [{"original": "–ö–£–ü–õ–Æ", "normalized": ""}, {"original": "17 Pro 256 silver sim - 1—à—Ç", "normalized": "iPhone 17 Pro 256 Silver 1Sim"}]

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –ù–ï–¢ iPhone 17 –∏–ª–∏ Air ‚Üí –≤–µ—Ä–Ω–∏ []`;
            
            const requestBody = {
                model: "deepseek/deepseek-chat",  // DeepSeek: –¥–µ—à–µ–≤–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                messages: [
                    {
                        role: "system",
                        content: systemPrompt
                    },
                    {
                        role: "user",
                        content: message
                    }
                ],
                max_tokens: 300,  // –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
                temperature: 0.3,  // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –æ—Ç–≤–µ—Ç–æ–≤
            };
            
            const response = await fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.apiKey}`
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`AIML API error: ${response.status} - ${errorText}`);
            }

            const data = await response.json();
            let responseText = data.choices?.[0]?.message?.content || '';
            
            console.log(`üîÑ –û—Ç–≤–µ—Ç –æ—Ç AIML API: ${responseText}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Ñ—Ä–∞–∑—ã)
            if (responseText.length > 200) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
                if (/^(.)\1{50,}$/.test(responseText)) {
                    console.error(`‚ùå –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã "${responseText[0]}"`);
                    return {
                        success: false,
                        error: `API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã`
                    };
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ñ—Ä–∞–∑—ã (–±–æ–ª–µ–µ 5 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥)
                const lines = responseText.split('\n');
                let repeatCount = 0;
                let lastLine = '';
                for (const line of lines) {
                    if (line.trim() === lastLine && line.trim() !== '') {
                        repeatCount++;
                        if (repeatCount > 5) {
                            console.error(`‚ùå –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ñ—Ä–∞–∑—ã "${line.trim()}"`);
                            return {
                                success: false,
                                error: `API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ñ—Ä–∞–∑—ã`
                            };
                        }
                    } else {
                        repeatCount = 0;
                        lastLine = line.trim();
                    }
                }
            }
            // –û—á–∏—â–∞–µ–º –æ—Ç markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            responseText = responseText.trim();
            
            // –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏
            if (responseText.startsWith('```json')) {
                responseText = responseText.replace(/^```json\s*/, '').replace(/\s*```$/, '');
            } else if (responseText.startsWith('```')) {
                responseText = responseText.replace(/^```\s*/, '').replace(/\s*```$/, '');
            }
            
            // –ò—â–µ–º JSON –º–∞—Å—Å–∏–≤ –≤ –æ—Ç–≤–µ—Ç–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ)
            const jsonMatch = responseText.match(/^(\[.*?\])/s);
            if (jsonMatch) {
                responseText = jsonMatch[1];
                console.log(`üîç –ò–∑–≤–ª–µ—á–µ–Ω JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞: ${responseText}`);
            }
            
            responseText = responseText.trim();
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
            let parsedProducts = null;
            try {
                parsedProducts = JSON.parse(responseText);
            } catch (e) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e.message);
            }

            return {
                success: true,
                data: data,
                text: responseText,
                products: parsedProducts,
                usage: data.usage
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AIML API:', error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }
}

/**
 * –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
 */
export function getAimlApiService(config) {
    return new AimlApiService(config);
}

