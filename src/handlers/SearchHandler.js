import { getGoogleSheetsService } from '../services/GoogleSheetsService.js';
import { getAimlApiService } from '../services/AimlApiService.js';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≤ Google Sheets
 */
export class SearchHandler {
    constructor(bot, config) {
        this.bot = bot;
        this.config = config;
        this.sheetsService = getGoogleSheetsService(config.googleSheets);
        this.aimlService = getAimlApiService(config.aimlapi);
        this.initialized = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    async initialize() {
        if (!this.initialized) {
            await this.sheetsService.initialize();
            this.initialized = true;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
     */
    async handleMessage(event) {
        try {
            const message = event.message;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
            const me = await this.bot.getUser();
            if (message.senderId === me?.id) {
                return;
            }

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (!message.text || message.text.trim().length === 0) {
                return;
            }
            
            const senderId = message.fromId?.userId?.value || message.senderId;
            const sender = await this.bot.findParticipantById(this.config.group.chatId, senderId);
           
            if (!sender) return;

            console.log(`üîÑ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${sender.username} —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.text}`);

            const response = await this.aimlService.sendMessage(message.text);

            if (response.success && response.products && Array.isArray(response.products)) {
                
                if (response.products.length === 0) return

                const productsWithPrices = await this.searchProductsWithPrices(response.products);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                const foundProducts = productsWithPrices.products.filter(p => p.found);
                
                if (foundProducts.length > 0) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏
                    const productsWithValidPrices = foundProducts.filter(p => p.price && p.price !== '–Ω–µ—Ç —Ü–µ–Ω—ã' && p.price.trim() !== '');
                    console.log(`üîç –¢–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏: ${productsWithValidPrices.length}`);
                    if (productsWithValidPrices.length === 0) {
                        console.log(`‚ö†Ô∏è –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Ü–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç.`);
                        return;
                    }
                    
                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                    const replyMessage = this.formatMessageWithPrices(message.text, productsWithPrices.products);

                    // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É: 5-7 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
                    const delayPerProduct = this.getRandomDelay(5000, 7000); 
                    const totalDelay = delayPerProduct * productsWithValidPrices.length;
                    
                    if (productsWithPrices.notFound.length > 0) {
                        console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã: ${productsWithPrices.notFound.join(', ')}`);
                    }
                    console.log(`üîÑ –ó–∞–¥–µ—Ä–∂–∫–∞: ${totalDelay} –º—Å –¥–ª—è ${productsWithValidPrices.length} —Ç–æ–≤–∞—Ä–æ–≤. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${sender.username}`);
                    
                    await this.delay(totalDelay);
                    await this.bot.sendPrivateMessage(sender.username, replyMessage);
                } else {
                    console.log(`‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç.`);
                }
            } else {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AIML API: ${response.error}`);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ SearchHandler:', error);
        }
    }

    /**
     * –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Google Sheets –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω
     * @param {Array} products - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {original: "...", normalized: "..."}
     */
    async searchProductsWithPrices(products) {
        const result = {
            allFound: true,
            products: [],
            notFound: []
        };

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
        const headers = await this.sheetsService.getHeaders();
        const priceColumnName = headers[1]; // –°—Ç–æ–ª–±–µ—Ü B (–∏–Ω–¥–µ–∫—Å 1) - —Ü–µ–Ω–∞

        for (const product of products) {
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            const productObj = typeof product === 'string' 
                ? { original: product, normalized: product }
                : product;

            const originalText = productObj.original;
            const normalizedName = productObj.normalized;

            // –ï—Å–ª–∏ normalized –ø—É—Å—Ç–æ–π - —Ç–æ–≤–∞—Ä –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
            if (!normalizedName || normalizedName.trim() === '') {
                result.allFound = false;
                result.notFound.push(originalText);
                result.products.push({
                    original: originalText,
                    normalized: normalizedName,
                    price: null,
                    found: false
                });
                continue;
            }

            try {
                // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ A –ø–æ normalized –Ω–∞–∑–≤–∞–Ω–∏—é
                const searchResults = await this.sheetsService.searchByText(normalizedName, { 
                    columnIndex: 0,
                    exactMatch: true 
                });

                if (searchResults.length > 0) {
                    // –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    const foundProduct = searchResults[0];
                    
                    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ B
                    const priceRaw = foundProduct[priceColumnName] || '';
                    console.log(`üîç –°—ã—Ä–∞—è —Ü–µ–Ω–∞ –¥–ª—è "${normalizedName}": "${priceRaw}"`);
                    
                    // –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç "1;—Å—É–º–º–∞" - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å—É–º–º—É –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
                    let price = '–Ω–µ—Ç —Ü–µ–Ω—ã';
                    if (priceRaw && typeof priceRaw === 'string') {
                        const parts = priceRaw.split(';');
                        if (parts.length === 2) {
                            price = parts[1].trim(); // –ë–µ—Ä–µ–º —Å—É–º–º—É –ø–æ—Å–ª–µ ";"
                        } else {
                            price = priceRaw; // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥—Ä—É–≥–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        }
                    }
                    console.log(`üí∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è "${normalizedName}": "${price}"`);
                    
                    result.products.push({
                        original: originalText,      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        normalized: normalizedName,  // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                        price: price,
                        found: true
                    });
                } else {
                    // –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
                    result.allFound = false;
                    result.notFound.push(originalText);
                    result.products.push({
                        original: originalText,
                        normalized: normalizedName,
                        price: null,
                        found: false
                    });
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ "${normalizedName}":`, error.message);
                result.allFound = false;
                result.notFound.push(originalText);
            }
        }

        return result;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
     * @param {number} min - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @param {number} max - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @returns {number} - –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
     */
    getRandomDelay(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
     * @param {number} ms - –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç "–∑–∞–≥–æ–ª–æ–≤–æ–∫" —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä "–ö—É–ø–ª—é")
     * –ë–µ—Ä–µ—Ç –≤—Å–µ —á—Ç–æ –∏–¥–µ—Ç –¥–æ –ø–µ—Ä–≤–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
     */
    extractMessageHeader(messageText, products) {
        if (!products || products.length === 0) {
            return '';
        }

        // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ª—é–±–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        let firstProductIndex = -1;
        for (const product of products) {
            const index = messageText.indexOf(product.original);
            if (index !== -1 && (firstProductIndex === -1 || index < firstProductIndex)) {
                firstProductIndex = index;
            }
        }

        if (firstProductIndex === -1) {
            return '';
        }

        // –ë–µ—Ä–µ–º –≤—Å–µ —á—Ç–æ –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –∫–æ–Ω—Ü–µ
        const header = messageText.substring(0, firstProductIndex).trim();
        return header;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–µ–Ω–∞–º–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å—Ç—Ä–æ–∫
     * @param {string} originalMessage - –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Array} productsWithPrices - –ú–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
     * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    formatMessageWithPrices(originalMessage, productsWithPrices) {
        const lines = originalMessage.split('\n');
        const resultLines = [];

        // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ original —Å—Ç—Ä–æ–∫–µ
        const productsMap = new Map();
        productsWithPrices.forEach(product => {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å
            productsMap.set(product.original.trim(), product);
        });

        for (const line of lines) {
            const trimmedLine = line.trim();
            
            // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if (trimmedLine === '') {
                resultLines.push('');
                continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–≤–∞—Ä–æ–º —Å —Ü–µ–Ω–æ–π
            let product = productsMap.get(trimmedLine);
            
            if (product) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é: "${trimmedLine}"`);
            } else {
                // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã)
                let cleanLine = trimmedLine;
                
                // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã (–ö—É–ø–ª—é, –ü—Ä–æ–¥–∞—é –∏ —Ç.–¥.)
                cleanLine = cleanLine.replace(/^(–∫—É–ø–ª—é|–ø—Ä–æ–¥–∞—é|–∏—â—É|–Ω—É–∂–µ–Ω|–Ω—É–∂–Ω–∞|–Ω—É–∂–Ω–æ)\s+/i, '');
                
                // –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã –∏ —á–∏—Å–ª–∞
                cleanLine = cleanLine.replace(/\s*\?\?\?\s*$/, ''); // —É–±–∏—Ä–∞–µ–º "???"
                cleanLine = cleanLine.replace(/\s*-\s*\d+\s*—à—Ç\s*$/, ''); // —É–±–∏—Ä–∞–µ–º "- —á–∏—Å–ª–æ —à—Ç" –≤ –∫–æ–Ω—Ü–µ
                cleanLine = cleanLine.replace(/\s*-\s*\d+\s*$/, ''); // —É–±–∏—Ä–∞–µ–º "- —á–∏—Å–ª–æ" –≤ –∫–æ–Ω—Ü–µ
                cleanLine = cleanLine.replace(/\s*-\s*$/, ''); // —É–±–∏—Ä–∞–µ–º "-" –≤ –∫–æ–Ω—Ü–µ
                cleanLine = cleanLine.replace(/\s*\.\s*$/, ''); // —É–±–∏—Ä–∞–µ–º "." –≤ –∫–æ–Ω—Ü–µ
                
                // –£–±–∏—Ä–∞–µ–º —á–∏—Å–ª–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä "white-5" -> "white")
                cleanLine = cleanLine.replace(/-\d+\s*/, ' '); // —É–±–∏—Ä–∞–µ–º "-—á–∏—Å–ª–æ" –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
                cleanLine = cleanLine.replace(/\s+\d+\s*$/, ''); // —É–±–∏—Ä–∞–µ–º " —á–∏—Å–ª–æ" –≤ –∫–æ–Ω—Ü–µ
                
                // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥–∏ —Å—Ç—Ä–∞–Ω –∏ –¥—Ä—É–≥–∏–µ —ç–º–æ–¥–∑–∏
                cleanLine = cleanLine.replace(/[\u{1F1E6}-\u{1F1FF}]{2}/gu, ''); // —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥–∏ —Å—Ç—Ä–∞–Ω
                cleanLine = cleanLine.replace(/[\u{1F600}-\u{1F64F}]/gu, ''); // —É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –ª–∏—Ü
                cleanLine = cleanLine.replace(/[\u{1F300}-\u{1F5FF}]/gu, ''); // —É–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ —ç–º–æ–¥–∑–∏
                cleanLine = cleanLine.replace(/[\u{1F680}-\u{1F6FF}]/gu, ''); // —É–±–∏—Ä–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏
                cleanLine = cleanLine.replace(/[\u{1F700}-\u{1F77F}]/gu, ''); // —É–±–∏—Ä–∞–µ–º –∞–ª—Ö–∏–º–∏—á–µ—Å–∫–∏–µ —ç–º–æ–¥–∑–∏
                cleanLine = cleanLine.replace(/[\u{1F780}-\u{1F7FF}]/gu, ''); // —É–±–∏—Ä–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —ç–º–æ–¥–∑–∏
                cleanLine = cleanLine.replace(/[\u{1F800}-\u{1F8FF}]/gu, ''); // —É–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏
                cleanLine = cleanLine.replace(/[\u{1F900}-\u{1F9FF}]/gu, ''); // —É–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                cleanLine = cleanLine.replace(/[\u{1FA00}-\u{1FA6F}]/gu, ''); // —É–±–∏—Ä–∞–µ–º —à–∞—Ö–º–∞—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                cleanLine = cleanLine.replace(/[\u{1FA70}-\u{1FAFF}]/gu, ''); // —É–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                
                cleanLine = cleanLine.replace(/\s+/g, ' '); // —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                cleanLine = cleanLine.trim();
                
                if (cleanLine !== trimmedLine) {
                    product = productsMap.get(cleanLine);
                    if (product) {
                        console.log(`üîç –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ –æ—á–∏—â–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ: "${cleanLine}" (–±—ã–ª–æ: "${trimmedLine}")`);
                    } else {
                        console.log(`‚ÑπÔ∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: "${trimmedLine}" -> "${cleanLine}"`);
                    }
                }
            }
            
            if (product && product.found && product.price) {
                // –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω - –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É
                console.log(`‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è "${trimmedLine}": "${product.price}"`);
                resultLines.push(`${trimmedLine} ${product.price}`);
            } else {
                // –°—Ç—Ä–æ–∫–∞ –∫–∞–∫ –µ—Å—Ç—å (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ —Å—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å)
                if (product) {
                    console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω, –Ω–æ –±–µ–∑ —Ü–µ–Ω—ã: "${trimmedLine}", found: ${product.found}, price: "${product.price}"`);
                } else {
                    console.log(`‚ÑπÔ∏è –°—Ç—Ä–æ–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ–≤–∞—Ä–æ–º: "${trimmedLine}"`);
                }
            }
        }

        return resultLines.join('\n');
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è + —Ü–µ–Ω—É
     */
    formatProductsWithPrices(products) {
        const lines = products.map(product => {
            if (product.found && product.price) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É
                return `${product.original} - ${product.price}`;
            }
            return product.original || product.name;
        });

        return lines.join('\n');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ
     */
    async getTableInfo() {
        try {
            const info = await this.sheetsService.getSpreadsheetInfo();
            return info;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ:', error.message);
            return null;
        }
    }
}
