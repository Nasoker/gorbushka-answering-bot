import { getGoogleSheetsService } from '../services/GoogleSheetsService.js';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≤ Google Sheets
 */
export class SearchHandler {
    constructor(bot, config) {
        this.bot = bot;
        this.config = config;
        this.sheetsService = getGoogleSheetsService(config.googleSheets);
        this.initialized = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    async initialize() {
        if (!this.initialized) {
            await this.sheetsService.initialize();
            this.initialized = true;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
     */
    async handleMessage(event) {
        try {
            const message = event.message;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
            const me = await this.bot.getUser();
            if (message.senderId === me?.id) {
                return;
            }

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (!message.text || message.text.trim().length === 0) {
                return;
            }
            
            const senderId = message.fromId?.userId?.value || message.senderId;
            const sender = await this.bot.findParticipantById(this.config.group.chatId, senderId);
           
            if (!sender) return;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ SearchHandler:', error.message);
            console.error('Stack:', error.stack);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    formatSearchResults(searchText, results) {
        const maxResults = 5; // –ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
        const limitedResults = results.slice(0, maxResults);
        
        let message = `üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchText}": ${results.length}\n\n`;

        limitedResults.forEach((result, index) => {
            message += `${index + 1}. `;
            
            // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è –∏–∑ —Å—Ç—Ä–æ–∫–∏, –∫—Ä–æ–º–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö (_rowNumber, _matchedColumn, _matchedValue)
            const entries = Object.entries(result).filter(([key]) => !key.startsWith('_'));
            
            entries.forEach(([key, value], idx) => {
                if (value && value.toString().trim()) {
                    message += `${key}: ${value}`;
                    if (idx < entries.length - 1) {
                        message += '\n   ';
                    }
                }
            });
            
            message += '\n\n';
        });

        if (results.length > maxResults) {
            message += `üìã –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ ${maxResults} –∏–∑ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.`;
        }

        return message;
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
     */
    async searchInColumn(columnName, searchText) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            const headers = await this.sheetsService.getHeaders();
            const columnIndex = headers.indexOf(columnName);

            if (columnIndex === -1) {
                console.log(`‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ "${columnName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return [];
            }

            return await this.sheetsService.searchByText(searchText, { columnIndex });
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ ${columnName}:`, error.message);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ
     */
    async getTableInfo() {
        try {
            const info = await this.sheetsService.getSpreadsheetInfo();
            return info;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ:', error.message);
            return null;
        }
    }
}
