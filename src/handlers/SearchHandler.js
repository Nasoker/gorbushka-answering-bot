import { getGoogleSheetsService } from '../services/GoogleSheetsService.js';
import { getAimlApiService } from '../services/AimlApiService.js';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≤ Google Sheets
 */
export class SearchHandler {
    constructor(bot, config) {
        this.bot = bot;
        this.config = config;
        this.sheetsService = getGoogleSheetsService(config.googleSheets);
        this.aimlService = getAimlApiService(config.aimlapi);
        this.initialized = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    async initialize() {
        if (!this.initialized) {
            await this.sheetsService.initialize();
            this.initialized = true;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
     */
    async handleMessage(event) {
        try {
            console.log('üîç [SearchHandler] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
            
            const message = event.message;
            console.log(`üì§ [SearchHandler] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message.text?.substring(0, 50)}..."`);

            console.log('üîç [SearchHandler] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
            const me = await this.bot.getUser();
            if (message.senderId === me?.id) {
                return;
            }

            if (!message.text || message.text.trim().length === 0) {
                return;
            }

            if (!message.text.includes("17")) {
                console.log('‚ö†Ô∏è [SearchHandler] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "17", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                return;
            }
            
            const senderId = message.fromId?.userId?.value || message.senderId;
            console.log(`üîç [SearchHandler] –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${senderId}`);
            
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–õ–°) —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º
            const userResult = await this.bot.findUserInAllChats(senderId);
            
            if (!userResult) {
                console.log(`‚ö†Ô∏è [SearchHandler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${senderId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –õ–°, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ`);
                await this.bot.forwardMessageToUser(193853539, message, this.config.group.chatId);
                console.log('‚úÖ [SearchHandler] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ');
                return;
            }
            
            const sender = userResult.user;
            console.log(`‚úÖ [SearchHandler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${sender.username || sender.firstName} (ID: ${sender.id})`);
                        
            if (!sender) {
                console.log('‚ùå [SearchHandler] –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –≤—ã—Ö–æ–¥–∏–º');
                return;
            }

            console.log(`üì§ [SearchHandler] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AIML API: "${message.text}"`);
            const response = await this.aimlService.sendMessage(message.text);
            console.log(`üì• [SearchHandler] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AIML API: success=${response.success}`);

            if (response.success && response.products && Array.isArray(response.products)) {
                
                if (response.products.length === 0) {
                    console.log(`‚ö†Ô∏è [SearchHandler] AIML API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: "${message.text}"`);
                    return;
                }

                console.log(`üîç [SearchHandler] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ü–µ–Ω –¥–ª—è ${response.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
                const productsWithPrices = await this.searchProductsWithPrices(response.products);
                console.log(`üìä [SearchHandler] –ü–æ–∏—Å–∫ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ ${productsWithPrices.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
                
                const productsWithValidPrices = productsWithPrices.products.filter(p => p.price != null);
                console.log(`üí∞ [SearchHandler] –¢–æ–≤–∞—Ä–æ–≤ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏: ${productsWithValidPrices.length}`);
                
                if (productsWithValidPrices.length === 0) {
                    console.log(`‚ö†Ô∏è [SearchHandler] –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.`);
                    return;
                }
                
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                console.log('üìù [SearchHandler] –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–∞–º–∏');
                const replyMessage = this.formatMessageWithPrices(message.text, productsWithPrices.products);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                if (!replyMessage || replyMessage.trim() === '') {
                    console.log(`‚ö†Ô∏è [SearchHandler] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.`);
                    return;
                }

                // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É: 5-7 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä —Å —Ü–µ–Ω–æ–π
                const delayPerProduct = this.getRandomDelay(5000, 7000);
                const totalDelay = delayPerProduct * productsWithValidPrices.length;
                
                if (productsWithPrices.notFound.length > 0) {
                    console.log(`‚ö†Ô∏è [SearchHandler] –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã: ${productsWithPrices.notFound.join(', ')}`);
                }
                console.log(`üîÑ [SearchHandler] –ó–∞–¥–µ—Ä–∂–∫–∞: ${totalDelay} –º—Å –¥–ª—è ${productsWithValidPrices.length} —Ç–æ–≤–∞—Ä–æ–≤. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${sender.username}`);
                console.log(`üìù [SearchHandler] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${replyMessage}"`);
                
                console.log(`‚è≥ [SearchHandler] –û–∂–∏–¥–∞–Ω–∏–µ ${totalDelay} –º—Å...`);
                await this.delay(totalDelay);
                
                console.log(`üì§ [SearchHandler] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${sender.username}`);
                await this.bot.sendPrivateMessage(sender.username, replyMessage);
                console.log(`‚úÖ [SearchHandler] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
            } else {
                console.error(`‚ùå [SearchHandler] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AIML API: ${response.error}`);
            }
        } catch (error) {
            console.error('‚ùå [SearchHandler] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ SearchHandler:', error);
            console.error('‚ùå [SearchHandler] Stack trace:', error.stack);
            console.error('‚ùå [SearchHandler] Error details:', {
                message: error.message,
                name: error.name,
                code: error.code
            });
        }
    }

    /**
     * –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Google Sheets –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω
     * @param {Array} products - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {original: "...", normalized: "..."}
     */
    async searchProductsWithPrices(products) {
        console.log(`üîç [SearchHandler] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ü–µ–Ω –¥–ª—è ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        
        const result = {
            allFound: true,
            products: [],
            notFound: []
        };

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
        console.log('üìã [SearchHandler] –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã');
        const headers = await this.sheetsService.getHeaders();
        const priceColumnName = headers[1]; // –°—Ç–æ–ª–±–µ—Ü B (–∏–Ω–¥–µ–∫—Å 1) - —Ü–µ–Ω–∞
        console.log(`üìã [SearchHandler] –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã, –∫–æ–ª–æ–Ω–∫–∞ —Ü–µ–Ω: ${priceColumnName}`);

        for (let i = 0; i < products.length; i++) {
            const product = products[i];
            console.log(`üîç [SearchHandler] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä ${i + 1}/${products.length}: ${product.original}`);
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            const productObj = typeof product === 'string' 
                ? { original: product, normalized: product }
                : product;

            const originalText = productObj.original;
            const normalizedName = productObj.normalized;

            // –ï—Å–ª–∏ normalized –ø—É—Å—Ç–æ–π - —Ç–æ–≤–∞—Ä –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
            if (!normalizedName || normalizedName.trim() === '') {
                result.allFound = false;
                result.notFound.push(originalText);
                result.products.push({
                    original: originalText,
                    normalized: normalizedName,
                    price: null,
                    found: false
                });
                continue;
            }

            try {
                // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ A –ø–æ normalized –Ω–∞–∑–≤–∞–Ω–∏—é
                const searchResults = await this.sheetsService.searchByText(normalizedName, { 
                    columnIndex: 0,
                    exactMatch: true 
                });

                if (searchResults.length > 0) {
                    // –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    const foundProduct = searchResults[0];
                    
                    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ B
                    const priceRaw = foundProduct[priceColumnName] || '';
                    
                    // –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç "1;—Å—É–º–º–∞" - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å—É–º–º—É –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
                    let price = '–Ω–µ—Ç —Ü–µ–Ω—ã';
                    if (priceRaw && typeof priceRaw === 'string') {
                        const parts = priceRaw.split(';');
                        if (parts.length === 2) {
                            price = parts[1].trim(); // –ë–µ—Ä–µ–º —Å—É–º–º—É –ø–æ—Å–ª–µ ";"
                        } else {
                            price = priceRaw; // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥—Ä—É–≥–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        }
                    }
                    
                    result.products.push({
                        original: originalText,      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        normalized: normalizedName,  // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                        price: price,
                        found: true
                    });
                } else {
                    // –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
                    result.allFound = false;
                    result.notFound.push(originalText);
                    result.products.push({
                        original: originalText,
                        normalized: normalizedName,
                        price: null,
                        found: false
                    });
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ "${normalizedName}":`, error.message);
                result.allFound = false;
                result.notFound.push(originalText);
            }
        }

        console.log(`üìä [SearchHandler] –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ ${result.products.length} —Ç–æ–≤–∞—Ä–æ–≤, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ${result.notFound.length}`);
        return result;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
     * @param {number} min - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @param {number} max - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @returns {number} - –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
     */
    getRandomDelay(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
     * @param {number} ms - –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–µ–Ω–∞–º–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å—Ç—Ä–æ–∫
     * @param {string} originalMessage - –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Array} productsWithPrices - –ú–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
     * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    formatMessageWithPrices(originalMessage, productsWithPrices) {
        const lines = originalMessage.split('\n');
        const resultLines = [];

        // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ original —Å—Ç—Ä–æ–∫–µ
        const productsMap = new Map();
        productsWithPrices.forEach(product => {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å
            productsMap.set(product.original.trim(), product);
        });

        for (const line of lines) {
            const trimmedLine = line.trim();
            
            // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è - –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if (trimmedLine === '') {
                resultLines.push('');
                continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–≤–∞—Ä–æ–º —Å —Ü–µ–Ω–æ–π
            let product = productsMap.get(trimmedLine);
            
            if (product) {
            } else {
                // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã)
                let cleanLine = trimmedLine;
                
                cleanLine = cleanLine.replace(/\s+/g, ' '); // —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                cleanLine = cleanLine.trim();
                
                if (cleanLine !== trimmedLine) {
                    product = productsMap.get(cleanLine);
                    if (product) {
                        console.log(`üîç –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ –æ—á–∏—â–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ: "${cleanLine}" (–±—ã–ª–æ: "${trimmedLine}")`);
                    } else {
                        console.log(`‚ÑπÔ∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: "${trimmedLine}" -> "${cleanLine}"`);
                    }
                }
            }
            
            if (product && product.found && product.price && product.price !== '–Ω–µ—Ç —Ü–µ–Ω—ã' && product.price.trim() !== '') {
                // –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω —Å –≤–∞–ª–∏–¥–Ω–æ–π —Ü–µ–Ω–æ–π - –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É
                resultLines.push(`${trimmedLine} = ${product.price}`);
            } else {
                // –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–µ–∑ —Ü–µ–Ω—ã - –¥–æ–±–∞–≤–ª—è–µ–º –ë–ï–ó —Ü–µ–Ω—ã
                if (product) {
                    console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω, –Ω–æ –±–µ–∑ —Ü–µ–Ω—ã: "${trimmedLine}", found: ${product.found}, price: "${product.price}"`);
                } else {
                    console.log(`‚ÑπÔ∏è –°—Ç—Ä–æ–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ–≤–∞—Ä–æ–º: "${trimmedLine}"`);
                }
                // –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
                resultLines.push(trimmedLine);
            }
        }

        return resultLines.join('\n');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ
     */
    async getTableInfo() {
        try {
            const info = await this.sheetsService.getSpreadsheetInfo();
            return info;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ:', error.message);
            return null;
        }
    }
}
