import { ProductParser } from '../utils/productParser.js';
import { getDatabase } from '../utils/database.js';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
export class ProductHandler {
    constructor(bot) {
        this.bot = bot;
        this.db = getDatabase();
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    async handleMessage(event) {
        try {
            const message = event.message;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
            const me = await this.bot.getUser();
            if (message.senderId === me?.id) {
                return;
            }

            // –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            const products = ProductParser.parseMessage(message.text);

            if (products.length === 0) {
                return;
            }

            const foundProducts = [];

            for (const product of products) {
                console.log(`üì¶ –ò—â—É: ${ProductParser.formatForSearch(product)}`);

                // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                const results = this.db.searchProductsAdvanced(product);

                if (results.length > 0) {
                    foundProducts.push({
                        requested: product,
                        found: results
                    });

                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${results.length}`);
                } else {
                    console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ`);
                }
            }

            // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (foundProducts.length > 0) {
                await this.sendProductResults("", foundProducts);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ ProductHandler:', error.message);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    async sendProductResults(username, foundProducts,) {
        try {
            let responseText = `üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã:\n\n`;

            for (const { requested, found } of foundProducts) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞
                responseText += `üì± **${this.formatProductName(requested)}**\n`;

                // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–º–∞–∫—Å–∏–º—É–º 3 —Ç–æ–≤–∞—Ä–∞)
                for (const product of found) {
                    responseText += `\n‚Ä¢ ${product.name} ${product?.country}\n`;
                    responseText += `üí∞ –¶–µ–Ω–∞: ${this.formatPrice(product.price)} ‚ÇΩ\n`;
                    responseText += `\n`;
                }
            }

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if (responseText.length > 4000) {
                responseText = responseText.substring(0, 3900) + '\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)';
            }

            try {
                await this.bot.sendMessage("nasoker", { message: responseText });
                console.log(`üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username}`);
                return;
            } catch (privateError) {
                console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${privateError.message}`);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error.message);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
     */
    formatProductName(product) {
        let name = product.type;

        if (product.model) {
            name += ` ${product.model}`;
        }

        if (product.variant) {
            name += ` ${product.variant}`;
        }

        if (product.storage) {
            name += ` ${product.storage}`;
        }

        if (product.color) {
            name += ` ${product.color}`;
        }

        return name;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
     */
    formatPrice(price) {
        if (!price) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        return new Intl.NumberFormat('ru-RU').format(price);
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö
     */
    async testParser() {
        const { EXAMPLE_MESSAGES } = await import('../utils/productParser.js');

        console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤:\n');

        for (const message of EXAMPLE_MESSAGES) {
            console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: "${message}"`);

            const products = ProductParser.parseMessage(message);

            if (products.length > 0) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);

                for (const product of products) {
                    console.log(`   üì¶ ${this.formatProductName(product)}`);

                    // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤ –ë–î
                    const results = this.db.searchProductsAdvanced(product);
                    console.log(`   üîç –ù–∞–π–¥–µ–Ω–æ –≤ –ë–î: ${results.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`);
                }
            } else {
                console.log(`‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            }

            console.log('');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î
     */
    getDatabaseStats() {
        return this.db.getStats();
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
     */
    close() {
        this.db.close();
    }
}
