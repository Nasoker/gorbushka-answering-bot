import { TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions/index.js';
import { NewMessage } from 'telegram/events/index.js';
import { config } from '../config/config.js';
import { getUserDatabaseService } from '../services/UserDatabaseService.js';

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è Telegram –±–æ—Ç–∞
 */
export class TelegramBot {
    constructor(options = {}) {
        this.config = options.config || config;
        this.client = null;
        this.isRunning = false;
        this.userDb = getUserDatabaseService();
        this.isDbLoaded = false;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram
     */
    createClient() {
        const { apiId, apiHash, sessionString } = this.config.telegram;
        const session = new StringSession(sessionString);

        this.client = new TelegramClient(session, apiId, apiHash, {
            connectionRetries: this.config.client.connectionRetries,
        });

        return this.client;
    }

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram
     */
    async authenticate(callbacks = {}) {
        const { phoneNumber } = this.config.telegram;

        await this.client.start({
            phoneNumber: async () => phoneNumber,
            password: callbacks.password || (async () => ''),
            phoneCode: callbacks.phoneCode || (async () => ''),
            onError: (err) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
                if (callbacks.onError) callbacks.onError(err);
            },
        });

        return this.client.session.save();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
     */
    async initializeDatabase() {
        try {
            console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
            await this.userDb.initialize();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –≤ –ë–î
            await this.loadAllChatsToDatabase();
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —á–∞—Ç—ã
            this.subscribeToNewChats();
            
            this.isDbLoaded = true;
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const stats = await this.userDb.getStats();
            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î: ${stats.users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${stats.chats} —á–∞—Ç–æ–≤`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    async loadAllChatsToDatabase() {
        try {
            console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
            const dialogs = await this.client.getDialogs({ limit: 2000 });
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã
            const privateChats = dialogs.filter(dialog => dialog.entity.className === 'User');
            
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${privateChats.length} –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ ${dialogs.length} –≤—Å–µ–≥–æ —á–∞—Ç–æ–≤`);
            
            let addedCount = 0;
            let updatedCount = 0;
            const totalChats = privateChats.length;
            let processedCount = 0;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const progressInterval = Math.max(1, Math.floor(totalChats / 20));
            
            for (const dialog of privateChats) {
                const chat = dialog.entity;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —á–∞—Ç –≤ –ë–î
                const existingChat = await this.userDb.findUserById(chat.id);
                
                if (existingChat) {
                    updatedCount++;
                } else {
                    addedCount++;
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await this.userDb.upsertUser({
                    id: chat.id,
                    username: chat.username,
                    firstName: chat.firstName,
                    lastName: chat.lastName,
                    phone: chat.phone,
                    bot: chat.bot,
                    chatId: chat.id,
                    chatTitle: `${chat.firstName || ''} ${chat.lastName || ''}`.trim() || chat.username || '–õ–∏—á–Ω—ã–π —á–∞—Ç',
                    chatType: chat.className
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç
                await this.userDb.upsertChat({
                    id: chat.id,
                    title: `${chat.firstName || ''} ${chat.lastName || ''}`.trim() || chat.username || '–õ–∏—á–Ω—ã–π —á–∞—Ç',
                    type: chat.className,
                    username: chat.username
                });
                
                processedCount++;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if (processedCount % progressInterval === 0 || processedCount === totalChats) {
                    const percentage = Math.round((processedCount / totalChats) * 100);
                    process.stdout.write(`\rüìã –ó–∞–≥—Ä—É–∑–∫–∞: ${processedCount}/${totalChats} (${percentage}%)`);
                }
            }
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            console.log('');
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${addedCount} –Ω–æ–≤—ã—Ö, ${updatedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤ –≤ –ë–î:', error.message);
            throw error;
        }
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —á–∞—Ç—ã
     */
    subscribeToNewChats() {
        try {
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤
            this.client.addEventHandler(this.handleNewChat.bind(this), new NewMessage({
                func: (event) => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π —á–∞—Ç (–ª–∏—á–Ω—ã–π)
                    const chat = event.chat;
                    return chat && chat.className === 'User';
                }
            }));
            
            console.log('üëÇ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —á–∞—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤—ã–µ —á–∞—Ç—ã:', error.message);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤
     */
    async handleNewChat(event) {
        try {
            const chat = event.chat;
            const sender = event.sender;
            
            if (!chat || chat.className !== 'User') {
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
            const existingUser = await this.userDb.findUserById(chat.id);
            
            if (!existingUser) {
                console.log(`üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${sender.username || sender.firstName}`);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                await this.userDb.upsertUser({
                    id: chat.id,
                    username: chat.username,
                    firstName: chat.firstName,
                    lastName: chat.lastName,
                    phone: chat.phone,
                    bot: chat.bot,
                    chatId: chat.id,
                    chatTitle: `${chat.firstName || ''} ${chat.lastName || ''}`.trim() || chat.username || '–õ–∏—á–Ω—ã–π —á–∞—Ç',
                    chatType: chat.className
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –≤ –ë–î
                await this.userDb.upsertChat({
                    id: chat.id,
                    title: `${chat.firstName || ''} ${chat.lastName || ''}`.trim() || chat.username || '–õ–∏—á–Ω—ã–π —á–∞—Ç',
                    type: chat.className,
                    username: chat.username
                });
                
                console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${sender.username || sender.firstName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î`);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞:', error.message);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑ —Å–æ–±—ã—Ç–∏—è
     * –í GramJS sender —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ event
     */
    getMessageInfo(event) {
        const message = event.message;
        const sender = event.sender; // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ event
        const chat = event.chat; // –ß–∞—Ç —Ç–æ–∂–µ –µ—Å—Ç—å –≤ event

        return { 
            message,
            chat, 
            sender,
            senderId: message?.senderId
        };
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    subscribeToMessages(handler) {
        const { chatId } = this.config.group;

        this.client.addEventHandler(handler, new NewMessage({
            chats: [chatId],
        }));
        console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${chatId}`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    async getUser() {
        try {
            const me = await this.client.getMe();
            return {
                id: me.id,
                username: me.username,
                firstName: me.firstName,
                lastName: me.lastName,
            };
        } catch (error) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error.message);
            return null;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤ –õ–°, –Ω–µ –≤ —á–∞—Ç)
     * @param {number|string|Object} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async sendPrivateMessage(userId, messageText) {
        try {
            await this.client.sendMessage(userId, { 
                message: messageText 
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è::', error);
        }
    }


    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–õ–°) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ë–î
     * @param {number|BigInt|string} userIdOrUsername - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username –¥–ª—è –ø–æ–∏—Å–∫–∞
     * @param {Object} options - –û–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
     * @param {boolean} options.useDatabase - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
     * @param {boolean} options.fallbackToTelegram - –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—Å–∫–∞—Ç—å –≤ Telegram (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)
     * @returns {Object|null} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —á–∞—Ç–µ, –≥–¥–µ –æ–Ω –Ω–∞–π–¥–µ–Ω, –∏–ª–∏ null
     */
    async findUserInAllChats(userIdOrUsername, options = {}) {
        const {
            useDatabase = true,
            fallbackToTelegram = false
        } = options;

        try {
            // –£–±–∏—Ä–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
            // console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIdOrUsername} –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö...`);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞ (–ø–æ ID –∏–ª–∏ –ø–æ username)
            const isUsernameSearch = typeof userIdOrUsername === 'string' && !userIdOrUsername.match(/^\d+$/);
            
            let userData = null;
            
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ë–î, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            if (useDatabase && this.isDbLoaded) {
                if (isUsernameSearch) {
                    userData = await this.userDb.findUserByUsername(userIdOrUsername);
                } else {
                    userData = await this.userDb.findUserById(userIdOrUsername);
                }
                
                if (userData) {
                    // –£–±–∏—Ä–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    // console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î: ${userData.username || userData.first_name || userData.id}`);
                    
                    return {
                        user: {
                            id: userData.id,
                            username: userData.username,
                            firstName: userData.first_name,
                            lastName: userData.last_name,
                            phone: userData.phone,
                            bot: userData.is_bot === 1
                        },
                        chat: {
                            id: userData.chat_id,
                            title: userData.chat_title,
                            type: userData.chat_type,
                            username: userData.username
                        }
                    };
                }
            }
            
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userIdOrUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return null;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            return null;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ reply —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ username
     * @param {string} username - Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @)
     * @param {string} messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {number} replyToMessageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
     * @param {string|number} chatId - ID —á–∞—Ç–∞ –≥–¥–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    async sendReplyMessage(username, messageText, replyToMessageId, chatId = null) {
        try {
            // –ï—Å–ª–∏ chatId –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
            if (!chatId) {
                const userResult = await this.findUserInAllChats(username, {
                    onlyPrivateChats: true
                });
                
                if (!userResult) {
                    console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö`);
                    return false;
                }
                
                chatId = userResult.user.id;
            }

            await this.client.sendMessage(chatId, {
                message: messageText,
                replyTo: replyToMessageId
            });
            
            console.log(`‚úÖ Reply —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}`);
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ reply —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}:`, error.message);
            return false;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ reply —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –ø–æ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} username - Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @)
     * @param {string} messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {number} replyToMessageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
     * @param {string|number} groupChatId - ID –≥—Ä—É–ø–ø—ã –≥–¥–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
     */
    async sendReplyToGroup(username, messageText, replyToMessageId, groupChatId) {
        try {
            await this.client.sendMessage(groupChatId, {
                message: `@${username} ${messageText}`,
                replyTo: replyToMessageId
            });
            
            console.log(`‚úÖ Reply —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è @${username}`);
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ reply —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –¥–ª—è @${username}:`, error.message);
            return false;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ username
     * @param {string} username - Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @)
     * @param {string} messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async sendPrivateMessageByUsername(username, messageText) {
        try {
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
            const userResult = await this.findUserInAllChats(username, {
                onlyPrivateChats: true
            });
            
            if (!userResult) {
                console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö`);
                return false;
            }

            await this.client.sendMessage(userResult.user.id, {
                message: messageText
            });
            
            console.log(`‚úÖ –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}`);
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}:`, error.message);
            return false;
        }
    }

    /**
     * –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ username
     * @param {number} userId - Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @)
     * @param {Object} originalMessage - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
     * @param {string|number} fromChatId - ID —á–∞—Ç–∞ –æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
     */
    async forwardMessageToUser(userId, originalMessage, fromChatId) {
        try {
            await this.client.forwardMessages(userId, {
                messages: [originalMessage.id],
                fromPeer: fromChatId
            });
            
            console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}:`, error.message);
            return false;
        }
    }

    /**
     * –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
     * @param {Object} originalMessage - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
     * @param {string|number} fromChatId - ID —á–∞—Ç–∞ –æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
     * @param {string|number} toGroupChatId - ID –≥—Ä—É–ø–ø—ã –∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
     */
    async forwardMessageToGroup(originalMessage, fromChatId, toGroupChatId) {
        try {
            await this.client.forwardMessages(toGroupChatId, {
                messages: [originalMessage.id],
                fromPeer: fromChatId
            });
            
            console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –≥—Ä—É–ø–ø—É ${toGroupChatId}`);
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É:`, error.message);
            return false;
        }
    }

    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
     */
    async disconnect() {
        if (this.client) {
            await this.client.disconnect();
            this.isRunning = false;
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        if (this.userDb) {
            await this.userDb.close();
        }
    }
}

